# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:8.0.302
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Set Classpath
          command: export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib
      - run:
          name: Echo Env
          command: printenv
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
          environment:
            CLASSPATH: .:$JAVA_HOME/lib:$JAVA_HOME/jre/lib
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  # 定义job的名字为【build】 runs not using Workflows must have a `build` job as entry point，
  build:
    # 配置工作目录
    working_directory: ~/repo
    # 执行环境为docker  run the steps with Docker
    docker:
      - image: circleci/openjdk:8.0.302
      # a collection of executable commands ，当前jobs要执行的具体步骤
    steps:
      # check out source code to working directory 检出源码到工作目录
      - checkout
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: v1-repo-{{ checksum "pom.xml" }}
      - run:
          name: Echo Env
          command: printenv
      - run:
          name: get dependency
          # 拉取依赖 gets the project dependencies
          command: mvn dependency:go-offline
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: v1-repo-{{ checksum "pom.xml" }}
      - run:
          name: build start
          command: echo "build start"
      - run:
          name: build project
          # 这里进行打包操作
          command: mvn package
      # 成功时的运行命令
      - run:
          name: bulid success
          command: echo "build success"
          when: on_success
      # 失败时的运行命令
      - run:
          name: build fail
          command: echo "build failur"
          when: on_fail
      # 存储测试结果
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/springcloud-task2020-0.0.1-SNAPSHOT.jar

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
